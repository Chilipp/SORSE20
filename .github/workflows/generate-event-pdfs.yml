name: generate-pdf-artifacts

on:
  workflow_dispatch:
    inputs:
      CHANGES_ONLY:
        description: Only generate PDFs of events that differ from the master branch
        required: false
        default: 1
  pull_request:
    paths:
      - '_events/*/*.md'

env:
  CHANGES_ONLY: 1
  OPEN_PULL_REQUEST: 0

jobs:
  GeneratePdfArtifacts:
    name: Generate PDFs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Update environment from workflow_dispatch input
        if: ${{ github.event.inputs.CHANGES_ONLY }}
        run: echo "::set-env name=CHANGES_ONLY::${{ github.event.inputs.CHANGES_ONLY }}"
      - name: Set additional variables
        run: |
            echo "pdfcreator rseng/pdf-generator@0.0.3 with latex.template.sorse from ${GITHUB_REPOSITORY}@${GITHUB_SHA}" >> ci/sorse-variables.txt
      - name: Copy files to ci folder
        run: |
            if [[ $CHANGES_ONLY == '1' ]]; then
                git diff -r --name-only origin/master -- _events/*/*.md | xargs -I {} sh -c "cp {} ci/ && echo Copied document: {}"
            else
                cp _events/*/*.md ci/
            fi
      - name: Configure PDF generation
        run: |
            if ls ci/*.md &> /dev/null; then
                echo "::set-env name=GENERATE_PDFS::1"
            fi

      - name: Generate Full PDF Template
        if: ${{ env.GENERATE_PDFS == '1' }}
        uses: rseng/pdf-generator@0.0.3
        with:

          # Generate in context of ci to remove path
          workdir: ci

          # The latex template to use (defaults to one here)
          latex_template: latex.template.sorse

          # Directory of files to recursively render (.md extension)
          paper_dir: .

          # A path to a png logo file
          png_logo: ../assets/images/logo-large.png

          # One of "minimal" or "pdf" for the template with image, etc.
          pdf_type: pdf

          # A mapping file to use
          mapping_file: sorse-mapping.txt

          # A variables file to use
          variables_file: sorse-variables.txt

      - name: Move PDFs to downloads folder
        if: ${{ env.GENERATE_PDFS == '1' }}
        run: |
          if [[ ${GITHUB_HEAD_REF} == '' ]]; then
            rm downloads/*
          fi
          mv ci/*.pdf downloads/

      - name: Checkout New Branch
        if: ${{ env.GENERATE_PDFS && env.GITHUB_HEAD_REF == '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE_BRANCH: ${{ github.head_ref || github.ref }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          printf "GitHub Actor: ${GITHUB_ACTOR}\n"
          SOURCE_BRANCH=${SOURCE_BRANCH#refs/heads/}
          export BRANCH_FROM="add-pdfs/${SOURCE_BRANCH}"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"

          # Test if branch exists in remote
          BRANCH_EXISTS=$(git ls-remote --heads origin ${BRANCH_FROM})

          # Force-create the new branch
          git branch
          git checkout -B "${BRANCH_FROM}"
          git branch

          git config --global user.name "github-actions"
          git config --global user.email "github-actions@users.noreply.github.com"

          git status
          git add downloads

          if git diff-index --quiet HEAD --; then
             printf "No changes\n"
             export OPEN_PULL_REQUEST=0
          else
             if [[ -z ${BRANCH_EXISTS} ]]; then
               export OPEN_PULL_REQUEST=1
             fi
             printf "Changes\n"
             git commit -m "Automated deployment to generate PDFs $(date '+%Y-%m-%d')"
             git push --force origin "${BRANCH_FROM}"
          fi
          echo "::set-env name=OPEN_PULL_REQUEST::${OPEN_PULL_REQUEST}"
          echo "::set-env name=PULL_REQUEST_FROM_BRANCH::${BRANCH_FROM}"
          echo "::set-env name=PULL_REQUEST_TITLE::[generate-pdfs] ${SOURCE_BRANCH}"
          PR_HINT="<sup>This PR has been automatically opened because some SORSE events changed. Do not manually push to the ${BRANCH_FROM} branch, as these commits might be overwritten. You can close this PR and, as long you do not delete the ${BRANCH_FROM} branch, no new PR will be created.</sup>"
          if [[ -z ${PR_NUMBER} ]]; then
              echo "::set-env name=PULL_REQUEST_BODY::Automated generation of event PDFs for branch ${SOURCE_BRANCH}.\n\n${PR_HINT}"
          else
              PR_NOTE="**Do not remove the ${BRANCH_FROM} branch until #${PR_NUMBER} has been merged or closed.**"
              echo "::set-env name=PULL_REQUEST_BODY::Automated generation of event PDFs for branch ${SOURCE_BRANCH}, see #${PR_NUMBER}.%0A%0A${PR_NOTE}%0A%0A${PR_HINT}"
          fi

      - name: Open Pull Request
        if: ${{ env.OPEN_PULL_REQUEST == '1' }}
        uses: vsoch/pull-request-action@1.0.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_BRANCH: ${{  github.head_ref }}

      - name: Upload pdfs as artifacts
        if: ${{ env.GENERATE_PDFS == '1' }}
        uses: actions/upload-artifact@v2-preview
        with:
          name: event-pdfs
          path: downloads
